@charset "UTF-8";
@import "variables";

/// Font size calculator
///
/// This mixin declares a function that can be used to calculate the responsive font/size all over
/// the application, and by doing this, it will keep your font-size values in REM format.
///
/// Note: the base font-size is always16px.
///
/// Use example:
/// p {
///     @include font-size(14px)
/// }
///
@function calculateRem($size) {
    $remSize: calc($size / 16px);
    @return $remSize * 1rem;
}

@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

/// Centering the element
///
/// This mixin declares a function with which generates centering for an element. Zou can use it vertically or
/// horizontally or both.
///
/// Note: with flexbox and grids, there are ways to center elements without this mixin.
///
/// Use example:
/// .foo {
///     @include center(both);
/// }
/// .foo-parent {
///     position: relative;
/// }
///
@mixin center($position) {
    position: absolute;

    @if $position == "vertical" {
        top: 50%;
        -webkit-transform: translateY(-50%);
        -ms-transform: translateY(-50%);
        transform: translateY(-50%);
    } @else if $position == "horizontal" {
        left: 50%;
        -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
        transform: translate(-50%);
    } @else if $position == "both" {
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }
}

/// Retina images
///
/// This mixin creates the retina image so we do not need to implement it manually all the day.
///
/// Note: it is necessary to minimize the image with some software, like tinypng, etc.
///
/// Use example:
/// div.logo {
///     background: url("logo.png") no-repeat;
///     @include image-2x("logo2x.png", 100px, 25px);
/// }
///
@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {
        background-image: url($image);
        background-size: $width $height;
    }
}

/// Quick gradients
///
/// Linear gradients even with color/stop points to use freely
///
/// Use example:
/// .element{
///     @include linear-gradient(
///         $direction: right,
///         $colors: #43c6ac #191654 #963d91
///     );
/// }
///
/// .element{
///     @include linear-gradient(
///         $direction: right,
///         $colors: (#1a2a6c 0 10%) (#b21f1f 30% 60%) (#fdbb2d 90% 100%)
///     );
/// }
///
/// .element{
///     @include linear-gradient(
///         $direction: right,
///         $colors: (#1a2a6c 25%) (#b21f1f 25% 50%) (#fdbb2d 50% 75%) (orange 75% 100%)
///     );
/// }
///
@mixin linear-gradient($direction, $colors) {
    $list: ();
    @for $i from 1 through length($colors) {
        $list: append($list, nth($colors, $i), comma);
    }
    @if map-has-key($map-for-directions, $direction) {
        background: linear-gradient(map-get($map-for-directions, $direction), $list);
    } @else if not map-has-key($map-for-directions, $direction) {
        @if not index("deg", unit($direction)) {
            @error "#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map-keys($map-for-directions)}.";
        } @else {
            background: linear-gradient($direction, $list);
        }
    }
}

/// Clearfix
///
/// Clearfix mixin so there should be no floating issue
///
/// Use example:
/// .element{
///   @include clearfix;
/// }
///
@mixin clearfix {
    &::after {
        content: "";
        display: block;
        clear: both;
    }
}
